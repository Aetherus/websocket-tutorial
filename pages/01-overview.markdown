---
layout: page
title: 前言
permalink: /overview/
---

在传统的HTTP请求响应模式下，服务器总是被动等待客户端/浏览器发送请求，
如果没有客户端发请求，服务器就永远干等着。
而且，服务器只能发响应给发送当前请求的客户端，无法响应给其他客户端。

但是在如今的后web 2.0时代，很多web应用都需要具备客户端和服务器、客户端和客户端的实时交互能力。
例如实时消息（网页版微信）、发单-抢单（滴滴出行）等，
这些都要求一个客户端操作能够实时反映到一个或多个**别人的**客户端上。
如果采用传统的HTTP方式，则需要每个客户端都不停地发送请求询问服务器是否有新消息（轮询），
这对服务器来说是不小的压力，对移动客户端来说也是电池杀手，
而且轮询的时间间隔不容易设置，短了，则服务器压力上升，电池续航下降；长了，则实时性得不到保证，用户体验变差。
我们急需一种机制让服务器能够主动向客户端推送消息，甚至更好的，任何一端都能向另一端主动推送消息。

为了达到这一目的，服务器和客户端必须时刻保持连接（长连接），以便在这个连接上随时发送消息，而不是像HTTP那样，一个请求响应就断开连接（短连接）。

WebSocket技术正是为这种应用场景而生。

WebSocket本质上只是TCP Socket的轻量级包装，它继承了TCP Socket的一切特性，例如全双工、包的有序性、自动重发机制等，
但是由于WebSocket在握手机制上使用的是HTTP，使得它在建立连接之前就能做更多更高层次的权限验证，
从而让服务器能够拒绝不符合要求的连接申请，节省连接数。

本教程旨在引导新手入门，所以不会涉及详细的握手协议（因为不需要你实现），
也不会使用任何高级框架（因为高级框架经常在WebSocket的基础上实现自定义协议，从而隐藏WebSocket的本质），
更不是项目里会用到的技术。
但是，我相信通过这篇基础教程，你会理解WebSocket的一些机制，在学习其他框架时会少一点迷茫。

为了让这篇教程通俗易懂，这里采用Node.js作为服务器端（你喜欢Java？一边玩去！），
JavaScript作为网页端（我也想用TypeScript，但不是谁都会），
如果你喜欢其他语言/框架，一来我不会（Elixir/Phoenix除外），二来通常抽象层级太高，
所以如果想学的话请自行Google相关教程。

